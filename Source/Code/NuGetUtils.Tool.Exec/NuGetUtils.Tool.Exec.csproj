<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>netcoreapp2.1</TargetFramework>
    <PackAsTool>true</PackAsTool>
    <ToolCommandName>nuget-exec</ToolCommandName>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.0.0" PrivateAssets="All" />
  </ItemGroup>


  <ItemGroup>
     <ProjectReference Include="..\NuGetUtils.Lib.Exec\NuGetUtils.Lib.Exec.csproj" />
     <ProjectReference Include="..\NuGetUtils.Lib.Tool\NuGetUtils.Lib.Tool.csproj" />
  </ItemGroup>

  <!-- Assembly information stuff -->
  <PropertyGroup>
     <VersionPrefix>2.0.0</VersionPrefix>
     <VersionSuffix></VersionSuffix>
     <AssemblyTitle>$(AssemblyName)</AssemblyTitle>
     <Description>This tool will restore the given NuGet package and then execute a method within the restored DLLs. The method does not need to be marked as entrypoint, and it may contain other parameter types than the default string array type.</Description>
  </PropertyGroup>

  <!-- NuGet package stuff -->
  <PropertyGroup>
     <PackageVersion>$(VersionPrefix)</PackageVersion>
     <PackageVersion Condition=" '$(VersionSuffix)' != ''">$(PackageVersion)-$(VersionSuffix)</PackageVersion>
     <PackageReleaseNotes>Updated to newer NuGet.Commands version. Also added possibility to specify where to save the output of the return value of the method to be executed. Furthermore, there was an internal refactor on how entrypoint methods are looked up.</PackageReleaseNotes>
     <PackageTags>nuget package execute assembly tool load managed</PackageTags>
     <Title>NuGetUtils: Package Executor Tool</Title>
  </PropertyGroup>

   <Import Project="$(CIPropsFilePath)" Condition=" '$(CIPropsFilePath)' != '' and Exists('$(CIPropsFilePath)') " />

</Project>
